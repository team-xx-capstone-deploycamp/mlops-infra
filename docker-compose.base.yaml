services:
  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    networks:
      - shared_network

  certbot_renew:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew --quiet; sleep 12h & wait $${!}; done;'"
    networks:
      - shared_network

  nginx:
    image: nginx:alpine
    container_name: nginx
    restart: unless-stopped
    expose:
      - 8081
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
      - /var/log/nginx:/var/log/nginx
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    depends_on:
      - minio
    networks:
      - shared_network

  minio:
    image: minio/minio:latest
    container_name: minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-minioadminpassword123}
      - MINIO_DOMAIN=${MINIO_DOMAIN:-minio.mydomain.com}
      - MINIO_SERVER_URL=${MINIO_SERVER_URL:-https://minio.mydomain.com}
      - MINIO_BROWSER_REDIRECT_URL=${MINIO_BROWSER_REDIRECT_URL:-https://console.minio.mydomain.com}
    volumes:
      - minio_data:/data
    expose:
      - "9000"
      - "9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - shared_network

  minio-create-bucket:
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      bash -c "
      mc alias set minio ${MINIO_LOCAL_DOMAIN} ${MINIO_USER} ${MINIO_PASSWORD} &&
      if ! mc ls minio/bucket; then
        mc mb minio/bucket
      else
        echo 'bucket already exists'
      fi
      "
    networks:
      - shared_network

  postgres:
    image: postgres:16-alpine
    container_name: postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-myuser}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-mypassword}
      - POSTGRES_DB=${POSTGRES_DB:-mydb}
    expose:
      - 5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/db-init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - shared_network

  mlflow:
    restart: always
    build: ./mlflow
    container_name: mlflow
    environment:
      - MLFLOW_METADATA_DB_USER=${MLFLOW_METADATA_DB_USER:-mlflow_metadata_user}
      - MLFLOW_METADATA_DB_PASSWORD=${MLFLOW_METADATA_DB_PASSWORD:-mlflow_metadata_password}
      - MLFLOW_METADATA_DB_NAME=${MLFLOW_METADATA_DB_NAME:-mlflow_metadata}
      - POSTGRES_HOST=${POSTGRES_HOST:-postgres:5432}
      - AWS_ACCESS_KEY_ID=${MINIO_USER:-minio_user}
      - AWS_SECRET_ACCESS_KEY=${MINIO_PASSWORD:-minio_password}
      - MLFLOW_S3_ENDPOINT_URL=${MINIO_LOCAL_DOMAIN:-http://minio:9000}
      - MLFLOW_ADMIN_USERNAME=${MLFLOW_ADMIN_USERNAME:-admin}
      - MLFLOW_ADMIN_PASSWORD=${MLFLOW_ADMIN_PASSWORD:-password}
      - MLFLOW_AUTH_CONFIG_PATH=${MLFLOW_AUTH_CONFIG_PATH:-/app/auth_config.ini}
      - MLFLOW_FLASK_SERVER_SECRET_KEY=${MLFLOW_FLASK_SERVER_SECRET_KEY:-mysecretkey}
      - MLFLOW_LOGGING_LEVEL=DEBUG
      - MLFLOW_AUTH_DB_USER=${MLFLOW_AUTH_DB_USER:-mlflow_auth_user}
      - MLFLOW_AUTH_DB_PASSWORD=${MLFLOW_AUTH_DB_PASSWORD:-mlflow_auth_password}
      - MLFLOW_AUTH_DB_NAME=${MLFLOW_AUTH_DB_NAME:-mlflow_auth}
    expose:
      - 5000
    volumes:
      - mlflow_data:/mlruns
      - ./mlflow/auth_config.ini:/app/auth_config.ini
    command: >
      mlflow server 
        --backend-store-uri postgresql://${MLFLOW_METADATA_DB_USER}:${MLFLOW_METADATA_DB_PASSWORD}@${POSTGRES_HOST}/${MLFLOW_METADATA_DB_NAME}
        --artifacts-destination s3://bucket 
        --host 0.0.0.0 
        --port 5000
        --app-name basic-auth
    depends_on:
      - minio
      - minio-create-bucket
      - postgres
    networks:
      - shared_network

volumes:
  minio_data:
  mlflow_data:
  postgres_data:

networks:
  shared_network:
    name: shared_network
